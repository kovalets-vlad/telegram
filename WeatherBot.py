import asyncio
import logging
import os
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from dotenv import load_dotenv
import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
WEATHER_API = os.getenv("WEATHER_API")

logging.basicConfig(level=logging.INFO)

dp = Dispatcher()

# ===================== –§–£–ù–ö–¶–Ü–á =====================

async def get_geolocation(city: str):
    url = "http://api.openweathermap.org/geo/1.0/direct"
    params = {
        "q": city,
        "appid": WEATHER_API,
        "limit": 1
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            if resp.status != 200:
                return None, None
            data = await resp.json()
            if not data:
                return None, None
            lat = data[0]["lat"]
            lon = data[0]["lon"]
            return lat, lon

async def get_current_weather(city: str, lat, lon) -> str:
    url = "https://api.openweathermap.org/data/2.5/weather"
    params = {
        "lat": lat,
        "lon": lon,
        "appid": WEATHER_API,
        "units": "metric",
        "lang": "ua"
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            if resp.status != 200:
                return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ."
            data = await resp.json()
            temp = data["main"]["temp"]
            feels = data["main"]["feels_like"]
            desc = data["weather"][0]["description"].capitalize()
            return (
                f"üåç –ü–æ–≥–æ–¥–∞ —É –º—ñ—Å—Ç—ñ {city}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                f"ü§î –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {feels}¬∞C\n"
                f"‚òÅ {desc}"
            )
        
async def get_hourly_weather(city, lat, lon, hours=1):
    url = f"https://api.openweathermap.org/data/2.5/forecast"
    params = {
        "lat": lat,
        "lon": lon,
        "appid": WEATHER_API,
        "units": "metric",
        "lang": "ua"
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            data = await resp.json()
    
    forecast = data["list"][:hours]  
    report = f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city} –ø–æ –≥–æ–¥–∏–Ω–∞—Ö:\n\n"
    
    for f in forecast:
        time = f["dt_txt"][11:16] 
        temp = f["main"]["temp"]
        desc = f["weather"][0]["description"].capitalize()
        report += f"üïë {time} ‚Üí {temp}¬∞C, {desc}\n"
    
    return report

async def get_daily_weather(city: str, lat, lon, days=5) -> str:
    url = "https://api.openweathermap.org/data/2.5/forecast"
    params = {
        "lat": lat,
        "lon": lon,
        "appid": WEATHER_API,
        "units": "metric",
        "lang": "ua"
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            if resp.status != 200:
                return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ."
            data = await resp.json()

            forecast = {}
            for item in data["list"]:
                date = datetime.datetime.fromtimestamp(item["dt"]).date()
                if date not in forecast:
                    forecast[date] = {"temps": [], "descriptions": []}
                forecast[date]["temps"].append(item["main"]["temp"])
                forecast[date]["descriptions"].append(item["weather"][0]["description"])

            result = [f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city} –Ω–∞ {days} –¥–Ω—ñ–≤:\n"]
            for i, (date, info) in enumerate(forecast.items()):
                if i >= days:
                    break
                avg_temp = round(sum(info["temps"]) / len(info["temps"]), 1)
                desc = max(set(info["descriptions"]), key=info["descriptions"].count).capitalize()
                result.append(f"üëâ {date}: {avg_temp}¬∞C, {desc}")

            return "\n".join(result)

# ===================== –•–ï–ù–î–õ–ï–†–ò =====================

@dp.callback_query(F.data.startswith("current:"))
async def process_current(callback: types.CallbackQuery):
    _, city, lat, lon = callback.data.split(":")
    report = await get_current_weather(city, float(lat), float(lon))
    await callback.message.answer(report)
    await callback.answer()

@dp.callback_query(F.data.startswith("daily:"))
async def process_daily(callback: types.CallbackQuery):
    _, city, lat, lon, cnt = callback.data.split(":")
    report = await get_daily_weather(city, float(lat), float(lon), int(cnt))
    await callback.message.answer(report)
    await callback.answer()

@dp.callback_query(F.data.startswith("hourly"))
async def cmd_hourly(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ –º—ñ—Å—Ç–æ: `/hourly –ö–∏—ó–≤`", parse_mode="Markdown")
        return
    
    city = args[1]
    lat, lon = await get_geolocation(city)
    if lat is None:
        await message.answer("‚ùå –ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞.")
        return
    
    report = await get_hourly_weather(city, lat, lon)
    await message.answer(report)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç üëã\n"
        "–Ø –±–æ—Ç, —è–∫–∏–π –ø–æ–∫–∞–∑—É—î –ø–æ–≥–æ–¥—É.\n\n"
        "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "`/weather –õ—å–≤—ñ–≤`\n\n"
        "üëâ –Ü —è —Å–∫–∞–∂—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≤—ñ–¥—á—É—Ç—Ç—è —Ç–∞ –æ–ø–∏—Å –ø–æ–≥–æ–¥–∏ üå¶",
        parse_mode="Markdown"
    )

@dp.message(Command("weather"))
async def cmd_weather(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ –º—ñ—Å—Ç–æ: `/weather –ö–∏—ó–≤`", parse_mode="Markdown")
        return

    city = args[1]
    lat, lon = await get_geolocation(city)
    if lat is None:
        await message.answer("‚ùå –ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå° –ü–æ—Ç–æ—á–Ω–∞", callback_data=f"current:{city}:{lat}:{lon}")],
        [InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å –ø–æ–≥–æ–¥–∏–Ω–Ω–æ", callback_data=f"hourly:{city}:{lat}:{lon}:1")]
        [InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤", callback_data=f"daily:{city}:{lat}:{lon}:5")]
    ])

    await message.answer(f"–û–∫–µ–π, {city} –∑–Ω–∞–π–¥–µ–Ω–æ! –í–∏–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=keyboard)

# ===================== MAIN =====================

async def main():
    bot = Bot(token=API_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
